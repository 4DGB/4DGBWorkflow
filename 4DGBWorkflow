#!/usr/bin/env python3

import argparse
import tempfile
import shutil
import shlex
import sys
import os
import subprocess as sub
from base64 import b85decode
from pathlib import Path

#####################
#  GLOBALS
#####################

# set in do_main()
DOCKER_PATH = None
DRY_RUN = None

#####################
#  HELPER FUNCTIONS
#####################

def docker_run(arguments):
    '''
    Run docker (unless it's a dry-run) with the given arguments.
    If docker fails, this script will exit
    '''
    if DRY_RUN:
        command = map(shlex.quote, [ str(DOCKER_PATH), *arguments ])
        print(f"\033[1m[\033[93mDRY RUN\033[0m\033[1m]:\033[0m {' '.join(command)}")
    else:
        run = sub.run([DOCKER_PATH, *arguments])
        try:
            run.check_returncode()
        except sub.CalledProcessError as e:
            # Code 130 means it died to a SIGINT, which is the cool and
            # normal way to exit when running the browser
            if e.returncode != 130:
                print_error(f"Docker command failed. (Exit code: {e.returncode})")
                exit(1)

def uid_args():
    '''
    Get arguments to pass to docker to set the UID and GID of the container
    to the current user
    '''
    uid = str( os.geteuid() )
    gid = str( os.getegid() )
    return ['--user', f'{uid}:{gid}' ]

def bind_args(host_dir, container_dir):
    '''
    Get the arguments to pass to docker to bind host_dir to container_dir
    '''
    host_path = Path(host_dir).resolve()
    return ['--volume', f'{host_path}:{container_dir}']

def print_error(message):
    print(f"\033[1m[\033[31mERROR\033[0m\033[1m]:\033[0m {message}", file=sys.stderr)

#####################
#  COMMANDS
#####################

def do_main(args):
    global DOCKER_PATH
    global DRY_RUN

    docker = shutil.which(args.docker)
    if docker is None:
        print_error(f"Could not find docker executable '{args.docker}'. Is it installed?")
        exit(1)
    DOCKER_PATH = Path(docker).resolve()

    DRY_RUN=args.dry

    if 'func' not in args:
        main_parser.print_help()
        sys.exit()

    # Execute function for specific command
    args.func(args)

def do_build(args):
    uid = [] if args.rootless else uid_args()

    indir = Path(args.directory).resolve()
    outdir = indir.joinpath('.build')

    bind = bind_args(indir, '/in') + bind_args(outdir, '/out')

    outdir.mkdir(parents=True, exist_ok=True)

    docker_run([
        'run', '-it', '--rm',
        *uid, *bind,
        f'{args.build_container}:{args.tag}'
    ])

def do_view(args):
    uid = [] if args.rootless else uid_args()

    indir = Path(args.directory).resolve()
    name = args.name or indir.name

    # If the input directory has a 'project.json', use it, otherwise
    # use the .build directory inside it
    if not indir.joinpath('project.json').is_file():
        indir = indir.joinpath('.build')

    bind = bind_args(indir, '/in')

    port = str(args.port)

    docker_run([
        'run', '-it', '--rm',
        *uid, *bind,
        '-p', f'127.0.0.1:{port}:8000',
        f'{args.view_container}:{args.tag}',
        port, name
    ])

def do_run(args):
    do_build(args)
    do_view(args)

def do_update(args):
    docker_run([
        'pull', f'{args.build_container}:{args.tag}'
    ])
    docker_run([
        'pull', f'{args.view_container}:{args.tag}'
    ])

def do_template(args):
    # Make output directory
    outdir = Path(args.directory)
    if outdir.is_dir():
        print_error(f"Output directory, '{outdir}' already exists!")
        exit(1)
    outdir.mkdir(exist_ok=False)

    # remove newlines from blob
    blob = TEMPLATE_BLOB.replace(b"\n", b"")

    # Decode blob into a temp directory, then extract
    with tempfile.TemporaryDirectory() as tmpdir:
        archive = Path(tmpdir).joinpath('archive.tar.xz')
        with open(archive, 'wb') as f:
            f.write( b85decode(blob) )
        
        shutil.unpack_archive(archive, outdir)

    print(f"Template created in {outdir}.")

def do_version(args):
    build_container = f"{args.build_container}:{args.tag}"
    view_container = f"{args.view_container}:{args.tag}"

    print(f"\033[1m Workflow Container: \033[0m{build_container}\n\t\033[1mVersion: \033[0m", end='')
    docker_run([
        'run', '--rm',
        '--entrypoint', './scripts/report_version.sh',
        build_container
    ])

    print(f"\033[1m Browser Container:  \033[0m{view_container}\n\t\033[1mVersion: \033[0m", end='')
    docker_run([
        'run', '--rm',
        '--entrypoint', './scripts/report_version.sh',
        view_container
    ])

#####################
#  ARGUMENT PARSING
#####################

# Global Arguments
main_parser = argparse.ArgumentParser(
    prog="4DGBWorkflow",
    description="Script to run docker containers for the 4DGB Workflow"
)
main_parser.add_argument(
    "-n", "--dry-run",
    action="store_true", default=False, dest="dry",
    help="Show what docker commands would be run, but don't run them"
)
main_parser.add_argument(
    "--docker",
    type=str, default="docker", metavar="PATH", dest="docker",
    help="Override the path/name of the docker client executable"
)
main_parser.add_argument(
    "--build-container",
    type=str, default="4dgb/4dgbworkflow-build", 
    dest="build_container", metavar="CONTAINER",
    help="Override the name of the container used in the build step"
)
main_parser.add_argument(
    "--view-container",
    type=str, default="4dgb/4dgbworkflow-view",
    dest="view_container", metavar="CONTAINER",
    help="Override the name of the container used in the view (browser) step"
)
main_parser.add_argument(
    "-t", "--tag",
    type=str, default="latest", metavar="TAG", dest="tag",
    help="Version tag for the containers to use. (Default: 'latest')"
)
main_parser.add_argument(
    "--rootless",
    action='store_true', default=False,
    help="If you are using a rootless version of Docker (or another container platform), include"
        " this flag to avoid overriding the user in the container. If you don't know what that"
        " means, you can ignore this :)"
)
subparsers = main_parser.add_subparsers(help="Command")

# Build command
def add_dir_arg(parser):
    '''
    Add argument to an argparse command parser for specifying a project directory.
    This is common across the 'build', 'view' and 'run' commands, which is why
    its in a function here.
    '''
    parser.add_argument(
        "directory",
        type=str, metavar="PROJECT_DIRECTORY",
        help="Path to project directory"
    )

build_parser = subparsers.add_parser('build', help="Build a project")
add_dir_arg(build_parser)
build_parser.set_defaults(func=do_build)

# View command
def add_view_args(parser):
    '''
    Add arguments to an argparse command parser for the 'view' command. These are shared
    by the 'run' command, which is why it's in a function here
    '''
    parser.add_argument(
    "-p", "--port",
    type=int, default=8000, metavar="PORT", dest="port",
    help="Port export from the container. This is the port you will use to connect to the"
        " viewer in the browser. (Default: 8000)"
    )
    parser.add_argument(
        "-n", "--name",
        type=str, default=None, metavar="NAME", dest="name",
        help="Set the name of the project. Defaults to the name of the project directory"
    )

view_parser = subparsers.add_parser('view', help="View/Browse a project")
add_dir_arg(view_parser)
add_view_args(view_parser)
view_parser.set_defaults(func=do_view)

# Run Command
run_parser = subparsers.add_parser('run', help="Run the workflow")
add_dir_arg(run_parser)
add_view_args(run_parser)
run_parser.set_defaults(func=do_run)

# Update command
update_parser = subparsers.add_parser('update', help="Update the Docker images for the Workflow")
update_parser.set_defaults(func=do_update)

# Template command
temp_parser = subparsers.add_parser('template', help="Create a template directory with example data")
temp_parser.add_argument(
    "-o", "--output",
    type=str, default="4DGB_Project/", metavar="PATH", dest="directory",
    help="Directory to extract the template into. (Default: ./4DGB_Project)"
)
temp_parser.set_defaults(func=do_template)

# Version command
version_parser = subparsers.add_parser('version', help="Get version information from Docker container")
version_parser.set_defaults(func=do_version)

#####################
#  MAIN
#####################

if __name__ == '__main__':
    args = main_parser.parse_args()
    do_main(args)


